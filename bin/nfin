#!/usr/bin/env bash

# todo:
# - on keyboard interrupt
# - move declarations to common file
# - email
# - text
# - native notification
# - install script
# - update script
# - ignore certain commands (e.g. man)

# todo need?
set -e

# load and export configuration
: ${NFIN_DIR:=$(cd $(dirname "$0") && pwd)}
: ${NFIN_HOME:=$NFIN_DIR/..}
NFIN_SETTINGS_FILE="$NFIN_HOME/etc/config.json"
NFIN_CONFIG=$( cat $NFIN_SETTINGS_FILE )

source "$NFIN_DIR/internal/get_setting"
source "$NFIN_DIR/internal/common"

supported_args='-c|--config|-h|--help'
supported_args=$( echo "^$supported_args$" | sed 's/|/$|^/g' )
local_changes_only=false

function process_arg {
  local formal_arg=$1
  shift 1
  local arg_opts="$@"
  case "$formal_arg" in
    -c|--config)
      source "$NFIN_DIR/internal/config"
      config "$@"
    ;;
    -h|--help)
      source "$NFIN_DIR/internal/help"
      nfin_help "$@"
      exit 0
    ;;
    *) 
      echo "Unsupported argument: $formal_arg"
      source "$NFIN_DIR/internal/help"
      nfin_usage
      exit 0
    ;;
  esac
}

function parse_args {
  local arg
  local args=()
  local all_args=( "$@" )

  for i in "${!all_args[@]}"; do
    arg=${all_args[$i]}
    if [ "$arg" = -- ]; then
      (( i+=1 ))
      break
    fi
    if [[ $arg =~ $supported_args ]]; then
      if [ "${#args[@]}" -gt 0 ]; then
        process_arg "${args[@]}"
      fi

      args=( "$arg" )
    else
      if [ ! "${#args[@]}" -eq 0 ]; then
        args+=( "$arg" )
      elif [ $arg = -* ]; then
        process_arg "$arg"
      else
        break
      fi
    fi
  done

  if [ "${#args[@]}" -gt 0 ]; then
    process_arg "${args[@]}"
  fi

  NFIN_USER_COMMAND="${all_args[@]:$i}"

  if [ -n  "$NFIN_USER_COMMAND" ]; then
    local_changes_only=true
  fi
}

source "$NFIN_DIR/internal/notify"

if [ "$#" -eq 0 ]; then
  notify
  exit 0
fi

NFIN_USER_COMMAND=

parse_args "$@"

export NFIN_USER_COMMAND

if [ -z "$NFIN_USER_COMMAND" ]; then
  exit 0
fi

# trap 'notify "$start" "failure" "$?" "$LINENO"' ERR

start=$(date +%s)

# what do we want to do with the error output?
# "$@" 2>/dev/null && outcome='success' || outcome='failure'

$NFIN_USER_COMMAND

return_code=$?
end=$(date +%s)

notify $return_code $start $end 

# todo: handle errors from above, but for now...
exit $return_code