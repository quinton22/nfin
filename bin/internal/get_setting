#!/usr/bin/env bash

source "$NFIN_DIR/internal/common"
# source "$(dirname $0)/common"

function load {
  NFIN_CONFIG=$( cat $NFIN_SETTINGS_FILE 2>/dev/null )
  NFIN_CONFIG_TYPE=$( cat $NFIN_SETTINGS_TYPE 2>/dev/null )
}

# $1: index
# $2: value
function verify_type {
  local config type
  config=$(jq ".notification.[$1]" "$NFIN_SETTINGS_FILE")
  type=$(jq ".notification.arrayValue" "$NFIN_SETTINGS_TYPE")

  local value value_type constraint_type required allowed 
  value=$(echo "$config" | jq -r ".$2") 
  value_type=$(echo "$config" | jq -r ".$2 | type")
  constraint_type=$(echo "$type" | jq -r ".$2.type")
  required=$(echo "$type" | jq -r ".$2.required")

  if [ "$value" = 'null' ]; then
    $required && return 1 || return 0
  fi

  if [ "$constraint_type" = 'string' ]; then
    allowed=$(echo "$NFIN_CONFIG_TYPE" | jq -r ".notification.arrayValue.$2.values")
    if [ "$allowed" != "null" ] && ! [[ " ${allowed[@]} " =~ " $value " ]]; then
      printf "Uh oh... typecheck failed on config file.\n\n" >&2
      printf "The notification setting at index %s/n" "$1" >&2
      printf "%sshould be one of the following values:" "$2" >&2
      IFS='\n' printf "%s" "${allowed[@]}" >&2

      return 1
    fi
  fi

  if [ "$value_type" != "$constraint_type" ]; then
    printf "Uh oh... typecheck failed on config file.\n\n" >&2
    printf "The notification setting at index %s/n" "$1" >&2
    printf "%sshould be type '%s' but was type '%s'" "$2" "$constraint_type" "$value_type" >&2
    return 1
  fi

  return 0
}

function verify_type_recursive {
  local config_key=$1
  local config_type=$2
  [ $config_key == '.' ] && local extending_key='' || local extending_key=$config_key

  local config="$(cat $NFIN_SETTINGS_FILE 2>/dev/null | jq -r "$config_key")"

  printf "testing:\n$config_key\n$config_type\n\n"

  if [ "$config" == 'null' ]; then
    if $(echo "$config_type" | jq -r '.required // false'); then
      return 1
    fi
    return 0
  fi

  # if type == 'array' || type == 'object' recurse on ${type}Type
  local type=$(echo "$config_type" | jq -r '.type')
  if [ $type == 'object' ]; then
    local entries_types=$(echo "$config_type" | jq -r '.objectType | to_entries')
    local entries_length=$(echo "$entries_types" | jq -r 'length')
    local i=0
    for (( i=0; i<$entries_length; i++ )); do
      local key=$(echo "$entries_types" | jq -r ".[$i].key")
      local value=$(echo "$entries_types" | jq -r ".[$i].value")
      verify_type_recursive "$extending_key.$key" "$value" || return 1
    done
    return 0
  fi
  if [ $type == 'array' ]; then
    local array_type=$(echo "$config_type" | jq -r '.arrayType.type')
    local array_length=$(echo "$config" | jq -r 'length' )
    # verify all items in jq '.[]' that the type matches array_type
    local i=0
    for (( i=0 ; i<$array_length ; i++ )); do
      verify_type_recursive "$extending_key[$i]" "$(echo "$config_type" | jq -r '.arrayType')" ||  return 1
    done
    return 0
  fi
  if [ $type == 'string' ] && [ $(echo "$config_type" | jq -r 'if .values == null then "null" else "good" end') == 'good' ]; then
    allowed=( $(echo "$config_type" | jq -r ".values | .[] ") )
    if ! [[ " ${allowed[@]} " =~ " $config " ]]; then
      printf "Uh oh... typecheck failed on config file.\n\n" >&2
      printf "The notification setting '%s'\n" "$config_key" >&2
      printf "should be one of the following values:" >&2
      IFS='\n' printf " %s," "${allowed[@]}" >&2
      printf "\nbut instead it is: $config"

      return 1
    fi
  fi

  [ $type == $(cat $NFIN_SETTINGS_FILE 2>/dev/null | jq -r "$config_key | type") ] && return 0 || { echo "fail"; return 1; }
}

function verify_all_types {
  verify_type_recursive '.' "$(cat $NFIN_SETTINGS_TYPE 2>/dev/null)" || return 1
  return 0
}

function load_settings {
  local o_sum n_sum 

  if [ -s "$NFIN_ETC_DIR/.config_hash" ]; then
    o_sum=$(cat $NFIN_ETC_DIR/.config_hash)

    if command -v sha256sum > /dev/null; then
      n_sum=$(sha256sum "$NFIN_SETTINGS_FILE")
    elif command -v openssl > /dev/null; then
      n_sum=$(openssl sha256 "$NFIN_SETTINGS_FILE" | sed -nE 's/^.*= ([[:alnum:]]+).*$/\1/p')
    fi

    if [ "$o_sum" = "$n_sum" ]; then
      return 0 # settings file is not dirty
    fi
  fi


  # settings file is dirty, so verify the types

  verify_all_types || return 1

  # types verified, save new hash
  echo "$n_sum" > "$NFIN_ETC_DIR/.config_hash"

  return 0
}

function get_setting {
  jq -r ".$1" "$NFIN_SETTINGS_FILE"
}

function set_setting {
  jq ".$1=$2" "$NFIN_SETTINGS_FILE" > "$NFIN_SETTINGS_FILE"
}

function get_default_config {
  jq -r ".notification.arrayValue.$1.default" "$NFIN_SETTINGS_TYPE"
}

# $1: exit value - 0 or >=1
# $2: elapsed time
function get_notification_type {
  local exit_value on_default min_default max_default notif_type return_value
  [ "$1" -eq 0 ] && exit_value="success" || exit_value="error"

  on_default=$(get_default_config 'on')
  min_default=$(get_default_config 'minTime')
  max_default=$(get_default_config 'maxTime')
  notif_default=$(get_default_config 'type')

  local elapsed_time=${2:-0}

  local test_string=". // [] |
  map(
    select(
      ( ( .on // \"$on_default\" ) == \"all\" or .on == \"$exit_value\" ) and
      ( $elapsed_time < 0 or ( ( .minTime // ${min_default:- -1} ) <= $elapsed_time and ( ( .maxTime // ${max_default:- -1} ) <= 0 or ( .maxTime // ${max_default:- -1} ) > $elapsed_time ) ) )
    )
  ) | .[0].type // \"bell\""

  notif_type=$( echo $( get_setting 'notification' ) | jq -r "$test_string" )

  return_value=( "${notif_type:-bell}" "$exit_value" )

  echo "${return_value[@]}"
}