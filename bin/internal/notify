#!/usr/bin/env bash

source "$NFIN_DIR/internal/elapsed_time"
source "$NFIN_DIR/internal/get_setting"
source "$NFIN_DIR/internal/common"

function native_notification {
   if [[ "$OS" == 'Darwin' ]]; then
    case $1 in
      success)
        local title="\"Command succeeded\""
        ;;
      failure)
        local title="\"Command failed\""
        ;;
      *)
        local title="\"Command finished\""
        ;;
    esac

    # todo: capture and display output
    message="\"$NFIN_USER_COMMAND\""

    [[ "$2" == 'notification' ]] \
    && content="$message with title \"nFin\" subtitle $title ${3-""}" \
    || content="$title message $message ${3-""}"

    osascript -e "display $2 $content" &>/dev/null
  fi
  # todo windows
}

function alert {
  [[ "$1" =~ (success|finished) ]] && local alert_type='informational' || local alert_type='critical'
  native_notification $1 'alert' "as $alert_type"
}

function notification {
  native_notification $1 'notification' "sound name \"Submarine\""
}

function speak {
  if [[ "$OS" == 'Darwin' ]]; then
    say $1
  else
    bell $1
  fi
}

function bell {
  [[ "$1" =~ (finished|success) ]] && num_bells="\a" || num_bells="\a\a"
  echo -en "$num_bells"
}


function notify {
  local setting=$(get_success_or_error_setting ${1:-0})
  action_wq=$( get_setting "notification.$setting.type" )
  action=$(echo ${action_wq//\"/""})

  local finish_type='finished'
  if [[ ! -z $1 ]]; then
    [[ $1 -eq 0 ]] && finish_type='success' || finish_type='failure'
  fi
  
  case $action in
  email)
    # todo
    ;;
  text)
    # todo
    ;;
  speak)
    speak $finish_type
    ;;
  bell)
    bell $finish_type
    ;;
  alert)
    alert $finish_type
    ;;
  notification)
    notification $finish_type
    ;;
  *)
    bell $finish_type
    ;;
  esac

  return $?
}

# given the start time, end time, & return code, notify or don't
function handle_notify {
  load_settings
  "$(get_setting notification.$(get_success_or_error_setting ${3:-0}).enabled)" || return 1 # failed to notify -- disabled

  test_elapsed_time "$@" || return 1

  return $(notify $3)
}
