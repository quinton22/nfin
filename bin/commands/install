#!/usr/bin/env bash

# Precondition:
# - This file is expected to be run as part of the cli
# - OR with the proper file structure

# Install
# - Read in arguments
# - If list version arg, then get all versions and list
# - Else check if nfin is installed
# - If nfin not installed, proceed
# - If no version arg and nfin is already installed, require force arg
# - If version arg present, get a matching version, and check if that version is installed, only install if not already, unless force arg is present
# - Download correct version & setup file structure
# - Download version into ~/.nfin/lib/<version>/ & point current to that version


# NFIN_INSTALL_URI='https://raw.githubusercontent.com/quinton22/nfin/main/bin/install/install'

NFIN_HOME="$HOME/.nfin"
NFIN_LIB="$NFIN_HOME/lib"
NFIN_CURRENT="$NFIN_LIB/current"
NFIN_DIR="$NFIN_CURRENT/bin"
NFIN_ETC="$NFIN_HOME/etc"
NFIN_SETTINGS_FILE="$NFIN_ETC/config.json"
NFIN_TMP="$NFIN_HOME/tmp"

NFIN_SUPPORTED_VERSION='^((v?[0-9]+(\.[0-9]+){0,2})|latest)(-[a-z]+)?$'


source_files() {
  local util_dir=$(dirname $0)/../util
  source $util_dir/*
}


print_main_help() {
  printf "\nInstall nFin\n\n"
  printf "Usage:\n"
  printf "\n\t$(print_command 'nfin install [options]')\n\n"
  printf "Options:\n"
  printf "\n\t$(print_command '-h, --help')\n\t\t\tSee help\n"
  printf "\n\t$(print_command '-f, --force')\n\t\t\tForce install, overwriting current install and settings\n"
  printf "\n\t$(print_command '-v, --version \033[4mversion\033[0m')\n\t\t\tany acceptable version number matching the regex "
  printf "$(print_command $NFIN_SUPPORTED_VERSION) (ex. 1, 1.0, 1.0.0, v1.0, v1.0-beta, v1-any, latest, or latest-alpha)\n"
  printf "\n\t$(print_command '-l, --list, --list-versions')\n\t\t\tList versions\n"
}

supported_args_map=( 'help:-h|--help' 'force:-f|--force' 'list-versions:-l|--list|--list-versions ?' 'version:-v|--version %1' )
supported_args=''
for s_arg in "${supported_args_map[@]}"; do
  s_arg=${s_arg#*:}
  s_arg=${s_arg%% *}
  supported_args+="|$s_arg"
done
# supported_args='-h|--help|-f|--force|-l|--list-versions|--list|-v|--version'
supported_args=${supported_args#|}
supported_args_reg=$( echo "^${supported_args#|}$" | sed 's/|/$|^/g' )
arg_params=( "" )
help_arg=false
force_arg=false
list_versions_arg=false
is_version_arg_set=false
version_arg='latest'
version_url=''
matching_version=

get_arg() {
  local arg
  for arg in "${supported_args_map[@]}"; do
    if echo "$1" | grep -Eq -- $(echo "^${arg#*:}" | sed 's/ .*/$/g;s/|/$|^/g'); then
      break
    fi
  done
  
  echo "$arg"
}

get_formal_arg() {
  local arg=$(get_arg $1)
  echo "${arg%%:*}"
}

get_arg_params() {
  local arg=$(get_arg $1)
  if echo "$arg" | grep -q -- ' '; then
    echo "${arg#*[[:space:]]}"
  else
    echo ""
  fi
}

get_num_arg_params() {
  local arg_params=$(get_arg_params $1)
  case $arg_params in 
    \?) echo "0 1" ;;
    %\*) echo "0 -1" ;; # represents infinite
    %*) echo "${arg_params#%} ${arg_params#%}" ;;
    {*}) echo $arg_params | sed 's/[{}]//g;s/ //g;s/,/ /g' ;;
    "") echo "0 0";;
    *) echo "0 0" ;;
  esac
}

process_arg() {
  local formal_arg=$(get_formal_arg $1)
  shift 1
  local arg_opts="$@"
  case "$formal_arg" in
    help) help_arg=true ;;
    force) force_arg=true ;;
    list-versions)
      list_versions_arg=true
      if echo "$@" | grep -qE "$NFIN_SUPPORTED_VERSION"; then
        version_arg="$arg"
      fi
    ;;
    version)
      if echo "$@" | grep -qE "$NFIN_SUPPORTED_VERSION"; then
        is_version_arg_set=true
        version_arg="$arg"
      else
        printf "Oops, the version should satisfy the following regex:\n\n"
        printf "$(set_color 35)$NFIN_SUPPORTED_VERSION$(set_color) (ex. 1, 1.0, 1.0.0, v1.0, v1.0-beta, v1-any, latest, or latest-alpha)\n\n"
      fi
    ;;
    *) 
      echo "unknown with: $@"
      printf "Oops, nFin doesn't support argument '$arg'. See help:\n"
      print_main_help
      exit 1
    ;;
  esac
}

parse_args() {
  local arg
  local i=0
  local all_args=( "$@" )
  local num_args=${#all_args[@]}

  while [ $i -lt $num_args ]; do
    arg=${all_args[$i]}
    if [ "$arg" = -- ]; then
      break
    fi

    if [[ $arg =~ $supported_args_reg ]]; then
      local params
      local new_supported_args="$supported_args|--"

      local num_params=( $(get_num_arg_params $arg) )
      if [ ${num_params[1]} -gt 0 ] || [ ${num_params[1]} -lt 0 ]; then
        params=${all_args[@]:(($i + 1))}

        if [[ $params =~ $new_supported_args ]] ; then
          params=( $(echo $params | sed -E "s/$new_supported_args.*//") )
        else
          local l_params=( $params )
          
          [ ${#l_params[@]} -gt ${num_params[1]} ] && params=( ${l_params[@]:0:${num_params[1]}} )
          echo "${#l_params[@]} -gt ${num_params[1]}"
        fi
        
        process_arg $arg ${params[@]}
        (( i=$i + ${#params[@]} ))
      else
        process_arg $arg
      fi
    else
      printf "Oops, nFin doesn't support argument '$arg'. See help:\n"
      print_main_help
      exit 1
    fi
    (( i++ ))
  done
}

get_version_json() {
  local url='https://api.github.com/repos/quinton22/nfin/releases'
  if command -v curl > /dev/null; then
    curl -fsSLk -H 'Content-Type: application/json' $url
  else
    wget -qO- --no-check-certificate $url # TODO: test
  fi
}

list_versions() {
  local version_json version_list version release
  IFS=- read -r version release <<< "$1"
  version=${version#v}
  version_json=$(get_version_json)

  if [ "$version" = 'latest' ]; then
    version_list=$(echo $version_json | jq -r 'sort_by(.name) | .[].name')
  else
    version_list=$(echo $version_json | jq -r "map(select(.name | startswith(\"v$version\"))) | sort_by(.name) | .[].name")
  fi

  if [ -n "$version_list" ]; then
    printf "\nVersions:\n"
    printf "$version_list\n"
  else
    printf "\nCould not find any versions matching $(set_color 35)$version$(set_color)\n"
  fi
}

get_release_snippet() {
  printf "if \"$1\" == \"\" then contains(\"-\") | not elif \"$1\" == \"any\" then true else endswith(\"$1\") end"
}

# params:
# $1: version_json
# $2: release type
get_latest() {
  echo $(echo $1 | jq "map(select(.name | $(get_release_snippet $2) )) | sort_by(.name) | reverse | .[0]")
}

# params:
# $1: version_json
# $2: version
# $3: release type
get_specific_version() {
  echo $(echo $1 | jq "map(select(.name | startswith(\"v$2\") and $(get_release_snippet $3))) | sort_by(.name) | reverse | .[0]")
}

# params:
# $1: version_json
# $2: version
# $3: release type
get_version() {
  if [ "$2" = 'latest' ]; then
    echo $(get_latest "$1" "$3")
  else
    echo $(get_specific_version "$1" "$2" "$3")
  fi
}

get_closest_version() {
  local other_version_obj version matching_version
  version="${2#v}"

  while : ; do
    if [ "$3" = '' ]; then
      # look for alpha/beta/etc
      other_version_obj=$(get_version "$1" "$version" 'any')
    elif [ "$3" != 'any' ]; then
      # look for a regular version type
      other_version_obj=$(get_version "$1" "$version" '')
    fi

    if [ "$other_version_obj" != 'null' ]; then
      echo "$other_version_obj"
      return 0
    fi

    echo "$version" | grep -qE '\.' || break

    version="${version%.*}"
  done

  echo 'null'
  return 1
}

get_matching_version_url() {
  local version release version_json
  IFS=- read -r version release <<< "$1"
  version="${version#v}"

  version_json=$(get_version_json)
 
  local matching_version_obj

  matching_version_obj=$(get_version "${version_json[@]}" "$version" "$release")

  if [ "$matching_version_obj" = 'null' ]; then
    matching_version_obj=$(get_closest_version "${version_json[@]}" "$version" "$release")

    if [ "$matching_version_obj" != 'null' ]; then
      matching_version=$(echo $matching_version_obj | jq -r '.name')
      if $force_arg; then
        printf "Installing $(set_color 35)$matching_version$(set_color)\n"
      else
        [ $version = latest ] && local version_text='' || local version_text=" --version v$version"
        printf "Closest version found: $(set_color 35)$matching_version$(set_color)\n"
        printf "If you wish to install this version run either of the following commands:\n"
        printf "\n$(print_command 'curl -s '$NFIN_INSTALL_URI' | bash -s -- --version '$matching_version)\n"
        printf "\n$(print_command 'curl -s '$NFIN_INSTALL_URI' | bash -s -- --force'$version_text)\n\n"
        exit 1
      fi
    else 
      printf "Could not find a matching version for version: v$version\n"
      printf "Run the following to install the latest version:\n"
      printf "\n$(print_command 'curl -s '$NFIN_INSTALL_URI' | bash -s -- --version latest')\n\n"
      printf "You can also list all the versions available with the following command:"
      printf "\n$(print_command 'curl -s '$NFIN_INSTALL_URI' | bash -s -- --list-versions')\n\n"
      exit 1
    fi
  else
    matching_version=$(echo $matching_version_obj | jq -r '.name')
  fi

  version_url=$(echo $matching_version_obj | jq -r ".${2%%.*}ball_url")
}

download() {
  if command -v curl > /dev/null; then
    curl -fsSL "$1" > "$2"
  else
    wget -qO- "$1" > "$2"
  fi
}

# params:
# $1: version
create_file_structure() {
  # clear $NFIN_CURRENT
  rm -rf "$NFIN_CURRENT" 2> /dev/null

  # create file structure (if not already)
  # creates /lib, /etc, /lib/current/..., and /lib/$1/...
  cd $NFIN_HOME &> /dev/null
  cat $NFIN_TMP/*/config/dir_struct | sed '/current/{p;s/current/'$1'/g;};/^$/d' | xargs mkdir -p 2> /dev/null

  cd - &> /dev/null
  
  # if lib/current/ has files, then move those to the version
  # if [ -s "$NFIN_CURRENT/var/version" ]; then
  #   mv -f $NFIN_CURRENT/* $NFIN_LIB/$(cat "$NFIN_CURRENT/var/version")/ 2> /dev/null
  # fi

  # copy to lib/current/bin & etc
  ls -1d "$NFIN_TMP/*/bin" | xargs -J % cp -R % "$NFIN_CURRENT" 2> /dev/null
  ls -1 "$NFIN_TMP/*/config/*" | xargs -J % cp % "$NFIN_ETC" 2> /dev/null

  cp -R $NFIN_CURRENT/* $NFIN_LIB/$1

  echo "$1" > "$NFIN_CURRENT/var/version"
}

resolve_config() {
  if [ -s "$NFIN_SETTINGS_FILE" ]; then
    # merge config & remove template
    jq -s '.[0] * .[1]' "$NFIN_ETC/config.template.json" "$NFIN_SETTINGS_FILE" > "$NFIN_SETTINGS_FILE"
    rm "$NFIN_ETC/config.template.json"
  else
    mv "$NFIN_ETC/config.template.json" "$NFIN_SETTINGS_FILE"
  fi
}

add_to_rc_file() {
  if [ -s "$1" ]; then
    local init_fns=$NFIN_HOME/etc/init_fns
    ( [ -s $init_fns ] && cat $init_fns | grep -q "$1" ) || echo "$1" >> $init_fns
    
    if ! (grep -q '^[ ]*export NFIN_HOME="$HOME/.nfin"' "$1" && grep -q "^[ ]*\[ -s \"\$NFIN_HOME/bin/install/$2\" \] && source \"\$NFIN_HOME/bin/install/$2\"" "$1"); then
      cat << EOF >> "$1"

export NFIN_HOME="\$HOME/.nfin"
[ -s "\$NFIN_HOME/bin/install/$2" ] && source "\$NFIN_HOME/bin/install/$2"
EOF

      printf "Adding code to $(set_color 34)$1$(set_color)\n"
    fi
  else
    return 1
  fi
}


install() {
  # parse arguments
  # =================================
  parse_args "$@"

  if $help_arg; then
    print_main_help
    exit 0
  fi

  if $list_versions_arg; then
    list_versions "$version_arg"
    exit 0
  fi

  if [ -d "$NFIN_HOME" ]; then
    if $force_arg; then
      printf "Beginning force install\n"
    elif $is_version_arg_set; then
      printf "Attempting to install version $version_arg\n"
    else
      printf "nFin is already installed. To update, run:\n\n$(print_command 'nfin update')\n\n"
      printf "If you would like to proceed with a clean install, deleting all updated settings, run the following command:
  \n$(print_command 'curl -s '$NFIN_INSTALL_URI' | bash -s -- --force')\n\n"
      printf "You can also force install a specific version with the following command:"
      printf "\n\n$(print_command 'curl -s '$NFIN_INSTALL_URI' | bash -s -- --force --version <version>')\n\n"
      printf "Where $(set_color 35)<version>$(set_color) is any acceptable version number matching the regex\n"
      printf "$(set_color 35)$NFIN_SUPPORTED_VERSION$(set_color) (ex. 1, 1.0, 1.0.0, v1.0, v1.0-beta, v1-any, latest, or latest-alpha)\n"
      exit 1
    fi
  fi

  # check for installed packages
  # =================================

  if ! command -v jq > /dev/null; then
    printf "Please install jq. On mac:\n$(set_color 35)brew install jq$(set_color)\n"
    exit 1
  fi

  local file_type

  if command -v unzip > /dev/null; then
    file_type='zip'
  elif command -v tar > /dev/null; then
    file_type='tar.gz'
  else
    printf "Could not unzip. Please install either $(set_color 35)unzip$(set_color) or $(set_color 35)tar$(set_color).\n"
    exit 1
  fi

  # get version url
  get_matching_version_url "$version_arg" "$file_type"

  # todo check if $matching_version is already installed
  if [ -d "$NFIN_LIB/$matching_version" ]; then
    :
  fi

  # download
  # =================================

  mkdir -p "$NFIN_TMP" 2> /dev/null

  local download_location="$NFIN_TMP/nfin_$matching_version.$file_type"

  download "$version_url" "$download_location"

  if [ ! -f "$download_location" ]; then
    printf "$(set_color 31)Failed to download.$(set_color) Please try again.\n"
    # rm -rf "$NFIN_HOME"
    exit 1
  fi

  if [ $file_type = zip ]; then
    unzip -qo "$download_location" -d "$NFIN_TMP"
  else
    tar -f "$download_location" "$NFIN_TMP"
  fi
  rm -rf "$download_location"

  create_file_structure "$matching_version"

  rm -rf "$NFIN_TMP"/*
  
  resolve_config

  local initzsh initbash initsh

  add_to_rc_file "${ZDOTDIR:-$HOME}/.zshrc" "init-zsh" && initzsh=0 || initzsh=1
  add_to_rc_file "$HOME/.bashrc" "init-bash" && initbash=0 || initbash=1

  ( add_to_rc_file "$HOME/.bash_profile" "init" || add_to_rc_file "$HOME/.bash_login" "init" || add_to_rc_file "$HOME/.profile" "init" ) \
  && initsh=0 || initsh=1

  # if everything fails, create a .bash_profile
  if [ "$initzsh" -eq 1 ] && [ "$initbash" -eq 1 ] && [ "$initsh" -eq 1 ]; then
      touch "$HOME/.bash_profile"
      add_to_rc_file "$HOME/.bash_profile" "init" && initsh=0 || initsh=1
  fi

  if [ ! "$initzsh" -eq 1 ] || [ ! "$initbash" -eq 1 ] || [ ! "$initsh" -eq 1 ]; then
    printf "\n$(set_color 1 32)Yay! nFin successfully installed!$(set_color)\nYou can run:\n"
    printf "\n$(print_command "source $1")\n\nto use it now, or restart your terminal\n"
  else
    printf "\n$(set_color 31)Oops! Something went wrong.$(set_color)\nCould not add initialization code to an rc file.\n"
    printf "For nfin too work properly please add the following code to a\n"
    printf "$(set_color 34).zshrc$(set_color), $(set_color 34).bashrc$(set_color), $(set_color 34).bash_profile$(set_color), or $(set_color 34).profile$(set_color) file"
    printf " (commonly found in the your $(set_color 34)$HOME$(set_color) or $(set_color 34)~$(set_color) directory)\n"
    printf "\n$(print_command 'export NFIN_HOME="$HOME/.nfin"\n[ -s "$NFIN_HOME/bin/install/init" ] && source "$NFIN_HOME/bin/install/init')\n\n"
  fi
}

install "$@" || exit 1
